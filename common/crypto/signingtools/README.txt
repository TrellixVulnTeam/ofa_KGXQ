Signing files opera style.

Note that signfile-v2.sh is not backward compatible with opera based on presto.

==== Usage of scripts ====

The scripts, written as shellscripts. The shell must support xxd, base64 and openssl commandline tools.

These files must be copied to the target machine:

   creatersakey.sh
   signfile-v2.sh

Common datafiles: These files are generated by creatersakey.sh

   verify_key.priv  : Private key encrypted with password
   verify_key.pub   : Public key (DER encoded)
   verify_key.h     : H-file with char array of verify_key.pub, MUST be copied into source
   verify_key.b64   : PEM version of verify_key.pub


* creatersakey.sh

This command creates a new 2048 bit RSA private key and encrypts it using a
password you have to enter, it will then output the public key as DER and PEM
files (You must enter the password for this part) and create a C headerfile
containing the public key. This headerfile must be inserted into the sourcecode
that will load the signed files and the contained buffer must be sent as an argument to
OpVerifySignature.

* signfile-v2.sh

  This script is optimised for Javascript files

  Command line: signfile-v2.sh inputfile outputfile

This command will create a signature for inputfile using the key in
verify_key.priv (you must enter the password), and creates an outputfile
starting with a "// " followed by the base64 encoded signture on the first line
The content from the inputfile is then appended.

A selftest signature check is done by the script.

 ==== Example of use ====

# First create the key pairs:
user@id-1234:/tmp/test$ creatersakey.sh
Generating RSA private key, 2048 bit long modulus
...........................+++
...................................................................+++
e is 65537 (0x10001)
Enter pass phrase for verify_key.priv:
Verifying - Enter pass phrase for verify_key.priv:
Enter pass phrase for verify_key.priv:
writing RSA key
writing RSA key

# Then sign:
user@id-1234:/tmp/test$ signfile-opium.sh browser-unsigned.js browser-signed.js
Enter pass phrase for verify_key.priv:
Verified OK

# Make sure you keep the private key verify_key.priv in a safe place for later,
# and add the content of verify_key.h  to the code that is supposed to verify this
# file.

user@id-1234:/tmp/test$