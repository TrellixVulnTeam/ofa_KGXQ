// -*- Mode: c++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
//
// Copyright (C) 2013 Opera Software ASA.  All rights reserved.
//
// This file is an original work developed by Opera Software ASA

#include "testing/gtest/include/gtest/gtest.h"
#include "testing/gmock/include/gmock/gmock.h"

#include <fstream>
#include <vector>
#include "base/base64.h"
#include "base/files/file_util.h"
#include "common/crypto/op_verify_signature.h"

// Note: this is a custom key, generated for testing.
static const uint8_t DOM_BROWSERJS_KEY[] = {
    0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
    0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
    0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xd8, 0x23, 0x84,
    0x7c, 0x85, 0xc3, 0x64, 0x3d, 0x2a, 0x3c, 0xf5, 0x60, 0xc0, 0xb4, 0x31,
    0x57, 0x30, 0xa8, 0x5f, 0xeb, 0xeb, 0x62, 0x61, 0x26, 0x03, 0xc8, 0x2c,
    0xb8, 0x93, 0xaa, 0xb0, 0x83, 0xde, 0x70, 0x2f, 0x11, 0x23, 0x54, 0xc0,
    0xd0, 0x60, 0xb4, 0x8a, 0x12, 0x8b, 0xfe, 0xe9, 0x94, 0xe1, 0x73, 0x0c,
    0x01, 0x4c, 0xd2, 0xb1, 0x72, 0xac, 0x80, 0x48, 0x45, 0xe5, 0xb0, 0x5c,
    0xc3, 0x3b, 0xa7, 0x35, 0xb7, 0x1b, 0x4b, 0xed, 0xbe, 0x10, 0x95, 0xb2,
    0x6e, 0x7a, 0x36, 0xcf, 0xea, 0x53, 0x26, 0x18, 0x8e, 0x61, 0xad, 0x75,
    0x8a, 0xb4, 0xdb, 0x50, 0x26, 0x3d, 0xa1, 0xf7, 0xe4, 0x51, 0x57, 0x06,
    0xfa, 0xf6, 0xe9, 0xe0, 0x30, 0x53, 0x4b, 0xe4, 0xa3, 0x3b, 0xbe, 0xe6,
    0x6b, 0x8a, 0x46, 0x95, 0xf6, 0xc9, 0x21, 0x79, 0x18, 0x91, 0xf8, 0xf9,
    0x6c, 0xa8, 0x6f, 0x8b, 0xb0, 0xb3, 0x48, 0xfa, 0x4e, 0xbd, 0xa7, 0xa2,
    0x10, 0x4f, 0x1b, 0x84, 0xe8, 0x3c, 0x6e, 0x98, 0xc4, 0x51, 0x7c, 0x64,
    0x2c, 0x0e, 0x51, 0x8d, 0xb3, 0x74, 0xf8, 0x8f, 0xcf, 0xdf, 0x6e, 0xc2,
    0xfa, 0xbe, 0xc1, 0xc6, 0x80, 0x56, 0x4c, 0xa7, 0xc9, 0xd2, 0x9b, 0x26,
    0xda, 0x3c, 0x71, 0x79, 0xd4, 0xa9, 0xe9, 0xec, 0xde, 0x19, 0x98, 0x23,
    0x54, 0x3b, 0x30, 0x68, 0xbe, 0xfc, 0x7a, 0x5c, 0x1a, 0x2a, 0xc8, 0x93,
    0x74, 0x0b, 0xcb, 0x83, 0x0b, 0x96, 0xc0, 0x31, 0x86, 0x18, 0x8c, 0xb6,
    0x97, 0x1f, 0x78, 0xfd, 0x0e, 0x9f, 0x44, 0xe0, 0xa9, 0x5f, 0xca, 0x7b,
    0x84, 0xd6, 0xba, 0xfd, 0x3e, 0xd3, 0x67, 0x87, 0xad, 0x2d, 0x27, 0x47,
    0xff, 0x94, 0x9d, 0x1d, 0xb6, 0x52, 0x7c, 0x35, 0xfc, 0x8e, 0x8b, 0x70,
    0x98, 0xaa, 0xe5, 0x16, 0x4f, 0xea, 0xee, 0x20, 0x3d, 0x98, 0xd1, 0xbe,
    0xd9, 0x02, 0x03, 0x01, 0x00, 0x01
};

// Note: this is a custom key, generated for testing.
static const unsigned char SHA256_VERIFY_KEY[] = {
  0x30 ,0x82 ,0x01 ,0x22 ,0x30 ,0x0d ,0x06 ,0x09 ,0x2a ,0x86 ,0x48 ,0x86 ,
  0xf7 ,0x0d ,0x01 ,0x01 ,0x01 ,0x05 ,0x00 ,0x03 ,0x82 ,0x01 ,0x0f ,0x00 ,
  0x30 ,0x82 ,0x01 ,0x0a ,0x02 ,0x82 ,0x01 ,0x01 ,0x00 ,0xc2 ,0x5f ,0x7f ,
  0x0f ,0x67 ,0x2e ,0x64 ,0x75 ,0xb0 ,0xbd ,0x91 ,0x9a ,0xb2 ,0x52 ,0x38 ,
  0x6d ,0x80 ,0xdc ,0x56 ,0x56 ,0x53 ,0xa5 ,0xf6 ,0xfa ,0x7c ,0x09 ,0x2a ,
  0xaa ,0xfa ,0x9c ,0x95 ,0x66 ,0xd0 ,0x4d ,0x1d ,0x18 ,0x67 ,0x53 ,0xae ,
  0xbe ,0x32 ,0x7b ,0xa8 ,0x9d ,0x54 ,0x15 ,0xfd ,0xf0 ,0x19 ,0x89 ,0x90 ,
  0x38 ,0x21 ,0x84 ,0x5a ,0x5f ,0x3b ,0x8a ,0x13 ,0x18 ,0x8e ,0x79 ,0xc4 ,
  0xcc ,0x9a ,0x63 ,0xbc ,0x89 ,0xe7 ,0xe0 ,0x49 ,0x94 ,0x50 ,0x21 ,0xf5 ,
  0x36 ,0x4d ,0xf0 ,0x49 ,0xd7 ,0xdd ,0xc9 ,0x87 ,0x6f ,0x05 ,0xaa ,0xc4 ,
  0xd1 ,0x56 ,0x53 ,0x75 ,0xf4 ,0xcf ,0x3c ,0x47 ,0x9e ,0x18 ,0x3d ,0xe3 ,
  0xd8 ,0xa6 ,0xee ,0x75 ,0xf0 ,0xa2 ,0xeb ,0x9f ,0x7e ,0xa0 ,0x11 ,0x28 ,
  0xc3 ,0x28 ,0x8f ,0x76 ,0x57 ,0x99 ,0xa8 ,0x7b ,0xbb ,0x23 ,0x4f ,0x37 ,
  0xa3 ,0xb7 ,0x77 ,0x17 ,0x13 ,0x25 ,0x45 ,0xe7 ,0xcc ,0x11 ,0x75 ,0x0c ,
  0x7a ,0x6f ,0x0f ,0xc0 ,0x45 ,0x23 ,0x95 ,0x42 ,0xf5 ,0xbd ,0x20 ,0xc9 ,
  0xc3 ,0xaf ,0x9f ,0x5a ,0xfe ,0x6f ,0x65 ,0xdc ,0xc7 ,0xe6 ,0x97 ,0xc4 ,
  0x16 ,0x02 ,0x33 ,0x50 ,0xfd ,0xaa ,0xb2 ,0xdd ,0x3d ,0xc2 ,0x98 ,0x1c ,
  0x69 ,0xfc ,0x0d ,0x9f ,0x88 ,0x7b ,0xf4 ,0x27 ,0x34 ,0x90 ,0xd4 ,0x0b ,
  0xe2 ,0x6a ,0xd2 ,0x63 ,0xf4 ,0x94 ,0x72 ,0x35 ,0xd1 ,0xc8 ,0x21 ,0xf1 ,
  0x38 ,0xde ,0xd1 ,0x5d ,0x2a ,0x60 ,0xfe ,0xa8 ,0xaf ,0xc7 ,0x53 ,0xdc ,
  0x73 ,0x81 ,0xab ,0xa3 ,0xa2 ,0xb2 ,0x92 ,0x81 ,0x61 ,0x57 ,0x98 ,0xc2 ,
  0x38 ,0x38 ,0x4a ,0xa6 ,0x07 ,0x5b ,0x6b ,0x4e ,0x3a ,0xa6 ,0x2c ,0xe2 ,
  0xd3 ,0x16 ,0x4d ,0xc7 ,0x98 ,0xa3 ,0x3d ,0xb8 ,0x75 ,0xf9 ,0x30 ,0x00 ,
  0x4b ,0xd0 ,0x26 ,0x02 ,0xc4 ,0x86 ,0x26 ,0xf5 ,0xad ,0xcc ,0x6e ,0x13 ,
  0xe1 ,0x02 ,0x03 ,0x01 ,0x00 ,0x01
};


TEST(OpVerifySignatureTest, CheckSignatureTest) {

  // Note that this is not compatible with opera 12.x signatures,
  // as the chrome API for signing uses  the standard sha1WithRSAEncryption, where
  // the signature is asn.1 encoded.
 	// The opera 12 signature format is a simple rsa encoded SHA1 hash (RSAEncryption + SHA1)

  // sha1WithRSAEncryption signatures can be created by
  //
  // openssl dgst -sha1 -sign verify_key.priv -out sign.bin
  // Note that sign.bin must be converted to base64.

  base::FilePath base_folder = base::FilePath().AppendASCII("crypto_test_data");
  base::FilePath browser_js = base_folder.AppendASCII("browser.js");

  ASSERT_TRUE(base::PathExists(browser_js));

  std::string file_contents;
  ASSERT_TRUE(base::ReadFileToString(browser_js, &file_contents));

  EXPECT_TRUE(OpVerifySignature(file_contents,
                                "// ",
                                DOM_BROWSERJS_KEY,
                                sizeof(DOM_BROWSERJS_KEY)));
}

TEST(OpVerifySignatureTest, CheckBadSignatureTest) {

  base::FilePath base_folder = base::FilePath().AppendASCII("crypto_test_data");
  base::FilePath browser_js = base_folder.AppendASCII("browser_bad_signed.js");

  ASSERT_TRUE(base::PathExists(browser_js));

  std::string file_contents;
  ASSERT_TRUE(base::ReadFileToString(browser_js, &file_contents));

  EXPECT_FALSE(OpVerifySignature(file_contents,
                                 "// ",
                                 DOM_BROWSERJS_KEY,
                                 sizeof(DOM_BROWSERJS_KEY)));
}


TEST(OpVerifySignature6Test, CheckSignatureSHA256Test) {
  // sha256WithRSAEncryption signatures can be created by
  //
  // openssl dgst -sha256 -sign verify_key.priv -out sign.bin
  // Note that sign.bin must be converted to base64.

  base::FilePath base_folder = base::FilePath().AppendASCII("crypto_test_data");
  base::FilePath browser_js = base_folder.AppendASCII("browser_sha256.js");

  ASSERT_TRUE(base::PathExists(browser_js));

  std::string file_contents;
  ASSERT_TRUE(base::ReadFileToString(browser_js, &file_contents));

  EXPECT_TRUE(OpVerifySignatureSHA256(file_contents,
                                      "// ",
                                      SHA256_VERIFY_KEY,
                                      sizeof(SHA256_VERIFY_KEY)));
}

TEST(OpVerifySignatureTest, CheckBadSignatureSHA256Test) {
  base::FilePath base_folder = base::FilePath().AppendASCII("crypto_test_data");
  base::FilePath browser_js = base_folder.AppendASCII("browser_bad_signed.js");

  ASSERT_TRUE(base::PathExists(browser_js));

  std::string file_contents;
  ASSERT_TRUE(base::ReadFileToString(browser_js, &file_contents));

  EXPECT_FALSE(OpVerifySignatureSHA256(file_contents,
                                       "// ",
                                       SHA256_VERIFY_KEY,
                                       sizeof(SHA256_VERIFY_KEY)));

}
