// -*- Mode: c++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
//
// Copyright (C) 2012 Opera Software ASA.  All rights reserved.
//
// This file is an original work developed by Opera Software ASA
#include <sstream>

#include "testing/gtest/include/gtest/gtest.h"
#include "testing/gmock/include/gmock/gmock.h"

#include "common/migration/prefs_importer.h"
#include "common/migration/migration_result_listener_mock.h"

using opera::common::migration::ut::MigrationResultListenerMock;

namespace opera {
namespace common {
namespace migration {

class PrefsListenerMock : public PrefsListener {
 public:
  void OnPrefsArrived(const IniParser& parser) override {
    parser_ = parser;
  }
  IniParser parser_;

 private:
  ~PrefsListenerMock() override {}
};

TEST(PrefsImporterTest, EmptyInput) {
  std::unique_ptr<std::stringstream> input(new std::stringstream());
  scoped_refptr<PrefsListenerMock> listener(new PrefsListenerMock());
  scoped_refptr<PrefsImporter> importer(new PrefsImporter(listener));

  scoped_refptr<MigrationResultListenerMock> migration_result_listener =
      new MigrationResultListenerMock();
  EXPECT_CALL(*migration_result_listener, OnImportFinished(opera::PREFS, true));
  importer->Import(std::move(input), migration_result_listener);
}

TEST(PrefsImporterTest, SomePrefs) {
  std::unique_ptr<std::stringstream> input(new std::stringstream());
  *input << "\xEF\xBB\xBFOpera Preferences version 2.1\n";
  *input << "; Do not edit this file while Opera is running\n";
  *input << "; This file is stored in UTF-8 encoding\n";
  *input << "\n";
  *input << "[Proxy]\n";
  *input << "Opera Turbo Config File={Resources}region/pl/turbosettings.xml\n";
  *input << "HTTP server=127.0.0.1:566\n";
  *input << "HTTPS server\n";
  *input << "SOCKS server\n";
  *input << "Use Automatic Proxy Configuration=0\n";
  *input << "Use HTTPS=0\n";
  *input << "Use SOCKS=0\n";
  *input << "Enable Proxy=1\n";
  scoped_refptr<PrefsListenerMock> listener(new PrefsListenerMock());
  scoped_refptr<PrefsImporter> importer(new PrefsImporter(listener));

  scoped_refptr<MigrationResultListenerMock> migration_result_listener =
      new MigrationResultListenerMock();
  EXPECT_CALL(*migration_result_listener, OnImportFinished(opera::PREFS, true));
  importer->Import(std::move(input), migration_result_listener);

  ASSERT_TRUE(listener->parser_.HasValue("Proxy", "HTTP server"));
  EXPECT_EQ("127.0.0.1:566", listener->parser_.Get("Proxy", "HTTP server", ""));
}

}  // namespace migration
}  // namespace common
}  // namespace opera
