// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/oauth2/OAuth2Account

#ifndef com_opera_android_oauth2_OAuth2Account_JNI
#define com_opera_android_oauth2_OAuth2Account_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kOAuth2AccountClassPath[] = "com/opera/android/oauth2/OAuth2Account";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_OAuth2Account_clazz __attribute__((unused)) = 0;
#define OAuth2Account_clazz(env) base::android::LazyGetClass(env, kOAuth2AccountClassPath, &g_OAuth2Account_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.

static jlong Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT jlong
    Java_com_opera_android_oauth2_OAuth2Account_nativeInit(JNIEnv* env, jobject
    jcaller) {
  return Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_oauth2_OAuth2Account_nativeLogin(JNIEnv* env, jobject
    jcaller,
    jlong nativeOAuth2Account,
    jstring username,
    jstring password,
    jobject loginCallback) {
  OAuth2Account* native = reinterpret_cast<OAuth2Account*>(nativeOAuth2Account);
  CHECK_NATIVE_PTR(env, jcaller, native, "Login");
  return native->Login(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, username),
      base::android::JavaParamRef<jstring>(env, password),
      base::android::JavaParamRef<jobject>(env, loginCallback));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_oauth2_OAuth2Account_nativeLoginWithToken(JNIEnv*
    env, jobject jcaller,
    jlong nativeOAuth2Account,
    jstring username,
    jstring token,
    jobject loginCallback) {
  OAuth2Account* native = reinterpret_cast<OAuth2Account*>(nativeOAuth2Account);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoginWithToken");
  return native->LoginWithToken(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, username),
      base::android::JavaParamRef<jstring>(env, token),
      base::android::JavaParamRef<jobject>(env, loginCallback));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_oauth2_OAuth2Account_nativeLogout(JNIEnv* env,
    jobject jcaller,
    jlong nativeOAuth2Account) {
  OAuth2Account* native = reinterpret_cast<OAuth2Account*>(nativeOAuth2Account);
  CHECK_NATIVE_PTR(env, jcaller, native, "Logout");
  return native->Logout(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_com_opera_android_oauth2_OAuth2Account_nativeIsLoggedIn(JNIEnv* env,
    jobject jcaller,
    jlong nativeOAuth2Account) {
  OAuth2Account* native = reinterpret_cast<OAuth2Account*>(nativeOAuth2Account);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsLoggedIn", false);
  return native->IsLoggedIn(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_OAuth2Account_onLoggedOut = 0;
static void Java_OAuth2Account_onLoggedOut(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OAuth2Account_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OAuth2Account_clazz(env),
      "onLoggedOut",

"("
")"
"V",
      &g_OAuth2Account_onLoggedOut);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_OAuth2Account_onDestroy = 0;
static void Java_OAuth2Account_onDestroy(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      OAuth2Account_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, OAuth2Account_clazz(env),
      "onDestroy",

"("
")"
"V",
      &g_OAuth2Account_onDestroy);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsOAuth2Account[] = {
    { "nativeInit",
"("
")"
"J",
    reinterpret_cast<void*>(Java_com_opera_android_oauth2_OAuth2Account_nativeInit)
    },
    { "nativeLogin",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_oauth2_OAuth2Account_nativeLogin)
    },
    { "nativeLoginWithToken",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_oauth2_OAuth2Account_nativeLoginWithToken)
    },
    { "nativeLogout",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_oauth2_OAuth2Account_nativeLogout)
    },
    { "nativeIsLoggedIn",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_com_opera_android_oauth2_OAuth2Account_nativeIsLoggedIn)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsOAuth2AccountSize = arraysize(kMethodsOAuth2Account);

  if (env->RegisterNatives(OAuth2Account_clazz(env),
                           kMethodsOAuth2Account,
                           kMethodsOAuth2AccountSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, OAuth2Account_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace opera

#endif  // com_opera_android_oauth2_OAuth2Account_JNI
