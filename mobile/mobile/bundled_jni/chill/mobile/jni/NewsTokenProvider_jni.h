// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/dashboard/newsfeed/auth/NewsTokenProvider

#ifndef com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_JNI
#define com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kNewsTokenProviderClassPath[] =
    "com/opera/android/dashboard/newsfeed/auth/NewsTokenProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_NewsTokenProvider_clazz __attribute__((unused)) = 0;
#define NewsTokenProvider_clazz(env) base::android::LazyGetClass(env, kNewsTokenProviderClassPath, &g_NewsTokenProvider_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.

static jlong Create(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_GENERATOR_EXPORT jlong
    Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeCreate(JNIEnv*
    env, jobject jcaller) {
  return Create(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeDelete(JNIEnv*
    env, jobject jcaller,
    jlong nativeNewsTokenProvider) {
  NewsTokenProvider* native =
      reinterpret_cast<NewsTokenProvider*>(nativeNewsTokenProvider);
  CHECK_NATIVE_PTR(env, jcaller, native, "Delete");
  return native->Delete(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeResume(JNIEnv*
    env, jobject jcaller,
    jlong nativeNewsTokenProvider) {
  NewsTokenProvider* native =
      reinterpret_cast<NewsTokenProvider*>(nativeNewsTokenProvider);
  CHECK_NATIVE_PTR(env, jcaller, native, "Resume");
  return native->Resume(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativePause(JNIEnv*
    env, jobject jcaller,
    jlong nativeNewsTokenProvider) {
  NewsTokenProvider* native =
      reinterpret_cast<NewsTokenProvider*>(nativeNewsTokenProvider);
  CHECK_NATIVE_PTR(env, jcaller, native, "Pause");
  return native->Pause(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeRenewToken(JNIEnv*
    env, jobject jcaller,
    jlong nativeNewsTokenProvider) {
  NewsTokenProvider* native =
      reinterpret_cast<NewsTokenProvider*>(nativeNewsTokenProvider);
  CHECK_NATIVE_PTR(env, jcaller, native, "RenewToken");
  return native->RenewToken(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_NewsTokenProvider_onToken = 0;
static void Java_NewsTokenProvider_onToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jobject>& token) {
  CHECK_CLAZZ(env, obj.obj(),
      NewsTokenProvider_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, NewsTokenProvider_clazz(env),
      "onToken",

"("
"Lcom/opera/android/dashboard/newsfeed/auth/NewsToken;"
")"
"V",
      &g_NewsTokenProvider_onToken);

     env->CallVoidMethod(obj.obj(),
          method_id, token.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_NewsTokenProvider_onTokenLost = 0;
static void Java_NewsTokenProvider_onTokenLost(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      NewsTokenProvider_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, NewsTokenProvider_clazz(env),
      "onTokenLost",

"("
")"
"V",
      &g_NewsTokenProvider_onTokenLost);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsNewsTokenProvider[] = {
    { "nativeCreate",
"("
")"
"J",
    reinterpret_cast<void*>(Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeCreate)
    },
    { "nativeDelete",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeDelete)
    },
    { "nativeResume",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeResume)
    },
    { "nativePause",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativePause)
    },
    { "nativeRenewToken",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_nativeRenewToken)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsNewsTokenProviderSize =
      arraysize(kMethodsNewsTokenProvider);

  if (env->RegisterNatives(NewsTokenProvider_clazz(env),
                           kMethodsNewsTokenProvider,
                           kMethodsNewsTokenProviderSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, NewsTokenProvider_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace opera

#endif  // com_opera_android_dashboard_newsfeed_auth_NewsTokenProvider_JNI
