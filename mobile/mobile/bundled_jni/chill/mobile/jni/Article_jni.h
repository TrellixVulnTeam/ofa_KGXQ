// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/dashboard/newsfeed/data/Article

#ifndef com_opera_android_dashboard_newsfeed_data_Article_JNI
#define com_opera_android_dashboard_newsfeed_data_Article_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kArticleClassPath[] =
    "com/opera/android/dashboard/newsfeed/data/Article";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_Article_clazz __attribute__((unused)) = 0;
#define Article_clazz(env) base::android::LazyGetClass(env, kArticleClassPath, &g_Article_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.

static base::subtle::AtomicWord g_Article_getNewsId = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Article_getNewsId(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      Article_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, Article_clazz(env),
      "getNewsId",

"("
")"
"Ljava/lang/String;",
      &g_Article_getNewsId);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Article_getOriginalUrl = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_Article_getOriginalUrl(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      Article_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, Article_clazz(env),
      "getOriginalUrl",

"("
")"
"Ljava/lang/String;",
      &g_Article_getOriginalUrl);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

}  // namespace opera

#endif  // com_opera_android_dashboard_newsfeed_data_Article_JNI
