// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/browser/chromium/ChromiumTab

#ifndef com_opera_android_browser_chromium_ChromiumTab_JNI
#define com_opera_android_browser_chromium_ChromiumTab_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kChromiumTabClassPath[] =
    "com/opera/android/browser/chromium/ChromiumTab";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ChromiumTab_clazz __attribute__((unused)) = 0;
#define ChromiumTab_clazz(env) base::android::LazyGetClass(env, kChromiumTabClassPath, &g_ChromiumTab_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.

static jlong CreateChromiumTab(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& webContents,
    jboolean isPrivate,
    jboolean isWebapp);

JNI_GENERATOR_EXPORT jlong
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeCreateChromiumTab(JNIEnv*
    env, jobject jcaller,
    jobject webContents,
    jboolean isPrivate,
    jboolean isWebapp) {
  return CreateChromiumTab(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, webContents),
      isPrivate, isWebapp);
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeInitialize(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "Initialize");
  return native->Initialize(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeSetDelegate(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab,
    jlong nativeChromiumTabDelegate) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDelegate");
  return native->SetDelegate(env, base::android::JavaParamRef<jobject>(env,
      jcaller), nativeChromiumTabDelegate);
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeSetWebContentsDelegate(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab,
    jobject delegate) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetWebContentsDelegate");
  return native->SetWebContentsDelegate(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, delegate));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeSetInterceptNavigationDelegate(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab,
    jobject delegate) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetInterceptNavigationDelegate");
  return native->SetInterceptNavigationDelegate(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, delegate));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeRequestUpdateWebkitPreferences(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestUpdateWebkitPreferences");
  return native->RequestUpdateWebkitPreferences(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeShowAuthenticationDialogIfNecessary(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowAuthenticationDialogIfNecessary");
  return native->ShowAuthenticationDialogIfNecessary(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeClearAuthenticationDialogRequest(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearAuthenticationDialogRequest");
  return native->ClearAuthenticationDialogRequest(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeRequestBitmap(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab,
    jlong nativeBitmapSink) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestBitmap");
  return native->RequestBitmap(env, base::android::JavaParamRef<jobject>(env,
      jcaller), nativeBitmapSink);
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeRequestFrameCallback(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab,
    jobject callback) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestFrameCallback");
  return native->RequestFrameCallback(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeRestartHangMonitorTimeout(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "RestartHangMonitorTimeout");
  return native->RestartHangMonitorTimeout(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeKillProcess(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "KillProcess");
  return native->KillProcess(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeIsPrivateTab(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPrivateTab", false);
  return native->IsPrivateTab(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jboolean
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeIsWebApp(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsWebApp", false);
  return native->IsWebApp(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jint
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeGetSecurityLevel(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSecurityLevel", 0);
  return native->GetSecurityLevel(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

JNI_GENERATOR_EXPORT jstring
    Java_com_opera_android_browser_chromium_ChromiumTab_nativeGetOriginalRequestURL(JNIEnv*
    env, jobject jcaller,
    jlong nativeChromiumTab) {
  ChromiumTab* native = reinterpret_cast<ChromiumTab*>(nativeChromiumTab);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOriginalRequestURL", NULL);
  return native->GetOriginalRequestURL(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsChromiumTab[] = {
    { "nativeCreateChromiumTab",
"("
"Lorg/chromium/content_public/browser/WebContents;"
"Z"
"Z"
")"
"J",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeCreateChromiumTab)
    },
    { "nativeInitialize",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeInitialize)
    },
    { "nativeSetDelegate",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeSetDelegate)
    },
    { "nativeSetWebContentsDelegate",
"("
"J"
"Lorg/chromium/components/web_contents_delegate_android/WebContentsDelegateAndroid;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeSetWebContentsDelegate)
    },
    { "nativeSetInterceptNavigationDelegate",
"("
"J"
"Lorg/chromium/components/navigation_interception/InterceptNavigationDelegate;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeSetInterceptNavigationDelegate)
    },
    { "nativeRequestUpdateWebkitPreferences",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeRequestUpdateWebkitPreferences)
    },
    { "nativeShowAuthenticationDialogIfNecessary",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeShowAuthenticationDialogIfNecessary)
    },
    { "nativeClearAuthenticationDialogRequest",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeClearAuthenticationDialogRequest)
    },
    { "nativeRequestBitmap",
"("
"J"
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeRequestBitmap)
    },
    { "nativeRequestFrameCallback",
"("
"J"
"Lorg/chromium/base/Callback;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeRequestFrameCallback)
    },
    { "nativeRestartHangMonitorTimeout",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeRestartHangMonitorTimeout)
    },
    { "nativeKillProcess",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeKillProcess)
    },
    { "nativeIsPrivateTab",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeIsPrivateTab)
    },
    { "nativeIsWebApp",
"("
"J"
")"
"Z",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeIsWebApp)
    },
    { "nativeGetSecurityLevel",
"("
"J"
")"
"I",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeGetSecurityLevel)
    },
    { "nativeGetOriginalRequestURL",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_com_opera_android_browser_chromium_ChromiumTab_nativeGetOriginalRequestURL)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsChromiumTabSize = arraysize(kMethodsChromiumTab);

  if (env->RegisterNatives(ChromiumTab_clazz(env),
                           kMethodsChromiumTab,
                           kMethodsChromiumTabSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ChromiumTab_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace opera

#endif  // com_opera_android_browser_chromium_ChromiumTab_JNI
