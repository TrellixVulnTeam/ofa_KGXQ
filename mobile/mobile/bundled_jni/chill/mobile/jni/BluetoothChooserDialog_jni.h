// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/browser/dialog/BluetoothChooserDialog

#ifndef com_opera_android_browser_dialog_BluetoothChooserDialog_JNI
#define com_opera_android_browser_dialog_BluetoothChooserDialog_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kBluetoothChooserDialogClassPath[] =
    "com/opera/android/browser/dialog/BluetoothChooserDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_BluetoothChooserDialog_clazz __attribute__((unused))
    = 0;
#define BluetoothChooserDialog_clazz(env) base::android::LazyGetClass(env, kBluetoothChooserDialogClassPath, &g_BluetoothChooserDialog_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_dialog_BluetoothChooserDialog_nativeOnDialogFinished(JNIEnv*
    env, jobject jcaller,
    jlong nativeBluetoothChooserAndroid,
    jint eventType,
    jstring deviceId) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDialogFinished");
  return native->OnDialogFinished(env, base::android::JavaParamRef<jobject>(env,
      jcaller), eventType, base::android::JavaParamRef<jstring>(env, deviceId));
}

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_dialog_BluetoothChooserDialog_nativeRestartSearch(JNIEnv*
    env, jobject jcaller,
    jlong nativeBluetoothChooserAndroid) {
  BluetoothChooserAndroid* native =
      reinterpret_cast<BluetoothChooserAndroid*>(nativeBluetoothChooserAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "RestartSearch");
  return native->RestartSearch(env, base::android::JavaParamRef<jobject>(env,
      jcaller));
}

static base::subtle::AtomicWord g_BluetoothChooserDialog_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BluetoothChooserDialog_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& windowAndroid,
    const base::android::JavaRefOrBare<jstring>& origin,
    jlong nativeBluetoothChooserDialogPtr) {
  CHECK_CLAZZ(env, BluetoothChooserDialog_clazz(env),
      BluetoothChooserDialog_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, BluetoothChooserDialog_clazz(env),
      "create",

"("
"Lorg/chromium/ui/base/WindowAndroid;"
"Ljava/lang/String;"
"J"
")"
"Lcom/opera/android/browser/dialog/BluetoothChooserDialog;",
      &g_BluetoothChooserDialog_create);

  jobject ret =
      env->CallStaticObjectMethod(BluetoothChooserDialog_clazz(env),
          method_id, windowAndroid.obj(), origin.obj(),
              nativeBluetoothChooserDialogPtr);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_BluetoothChooserDialog_addOrUpdateDevice = 0;
static void Java_BluetoothChooserDialog_addOrUpdateDevice(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& deviceId,
    const base::android::JavaRefOrBare<jstring>& deviceName) {
  CHECK_CLAZZ(env, obj.obj(),
      BluetoothChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, BluetoothChooserDialog_clazz(env),
      "addOrUpdateDevice",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_BluetoothChooserDialog_addOrUpdateDevice);

     env->CallVoidMethod(obj.obj(),
          method_id, deviceId.obj(), deviceName.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_BluetoothChooserDialog_closeDialog = 0;
static void Java_BluetoothChooserDialog_closeDialog(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      BluetoothChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, BluetoothChooserDialog_clazz(env),
      "closeDialog",

"("
")"
"V",
      &g_BluetoothChooserDialog_closeDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_BluetoothChooserDialog_removeDevice = 0;
static void Java_BluetoothChooserDialog_removeDevice(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, const
    base::android::JavaRefOrBare<jstring>& deviceId) {
  CHECK_CLAZZ(env, obj.obj(),
      BluetoothChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, BluetoothChooserDialog_clazz(env),
      "removeDevice",

"("
"Ljava/lang/String;"
")"
"V",
      &g_BluetoothChooserDialog_removeDevice);

     env->CallVoidMethod(obj.obj(),
          method_id, deviceId.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_BluetoothChooserDialog_notifyAdapterTurnedOff
    = 0;
static void Java_BluetoothChooserDialog_notifyAdapterTurnedOff(JNIEnv* env,
    const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      BluetoothChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, BluetoothChooserDialog_clazz(env),
      "notifyAdapterTurnedOff",

"("
")"
"V",
      &g_BluetoothChooserDialog_notifyAdapterTurnedOff);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_BluetoothChooserDialog_notifyAdapterTurnedOn =
    0;
static void Java_BluetoothChooserDialog_notifyAdapterTurnedOn(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      BluetoothChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, BluetoothChooserDialog_clazz(env),
      "notifyAdapterTurnedOn",

"("
")"
"V",
      &g_BluetoothChooserDialog_notifyAdapterTurnedOn);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_BluetoothChooserDialog_notifyDiscoveryState =
    0;
static void Java_BluetoothChooserDialog_notifyDiscoveryState(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& obj, JniIntWrapper discoveryState) {
  CHECK_CLAZZ(env, obj.obj(),
      BluetoothChooserDialog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, BluetoothChooserDialog_clazz(env),
      "notifyDiscoveryState",

"("
"I"
")"
"V",
      &g_BluetoothChooserDialog_notifyDiscoveryState);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(discoveryState));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsBluetoothChooserDialog[] = {
    { "nativeOnDialogFinished",
"("
"J"
"I"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_dialog_BluetoothChooserDialog_nativeOnDialogFinished)
    },
    { "nativeRestartSearch",
"("
"J"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_dialog_BluetoothChooserDialog_nativeRestartSearch)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsBluetoothChooserDialogSize =
      arraysize(kMethodsBluetoothChooserDialog);

  if (env->RegisterNatives(BluetoothChooserDialog_clazz(env),
                           kMethodsBluetoothChooserDialog,
                           kMethodsBluetoothChooserDialogSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, BluetoothChooserDialog_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace opera

#endif  // com_opera_android_browser_dialog_BluetoothChooserDialog_JNI
