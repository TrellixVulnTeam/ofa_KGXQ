// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/oauth2/LoginResult

#ifndef com_opera_android_oauth2_LoginResult_JNI
#define com_opera_android_oauth2_LoginResult_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kLoginResultClassPath[] = "com/opera/android/oauth2/LoginResult";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_LoginResult_clazz __attribute__((unused)) = 0;
#define LoginResult_clazz(env) base::android::LazyGetClass(env, kLoginResultClassPath, &g_LoginResult_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.

static base::subtle::AtomicWord g_LoginResult_forUser = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LoginResult_forUser(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& username) {
  CHECK_CLAZZ(env, LoginResult_clazz(env),
      LoginResult_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, LoginResult_clazz(env),
      "forUser",

"("
"Ljava/lang/String;"
")"
"Lcom/opera/android/oauth2/LoginResult;",
      &g_LoginResult_forUser);

  jobject ret =
      env->CallStaticObjectMethod(LoginResult_clazz(env),
          method_id, username.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_LoginResult_forError = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LoginResult_forError(JNIEnv* env, JniIntWrapper error) {
  CHECK_CLAZZ(env, LoginResult_clazz(env),
      LoginResult_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, LoginResult_clazz(env),
      "forError",

"("
"I"
")"
"Lcom/opera/android/oauth2/LoginResult;",
      &g_LoginResult_forError);

  jobject ret =
      env->CallStaticObjectMethod(LoginResult_clazz(env),
          method_id, as_jint(error));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

}  // namespace opera

#endif  // com_opera_android_oauth2_LoginResult_JNI
