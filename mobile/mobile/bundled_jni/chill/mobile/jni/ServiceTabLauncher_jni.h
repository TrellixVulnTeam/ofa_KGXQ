// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/browser/ServiceTabLauncher

#ifndef com_opera_android_browser_ServiceTabLauncher_JNI
#define com_opera_android_browser_ServiceTabLauncher_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kServiceTabLauncherClassPath[] =
    "com/opera/android/browser/ServiceTabLauncher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_ServiceTabLauncher_clazz __attribute__((unused)) = 0;
#define ServiceTabLauncher_clazz(env) base::android::LazyGetClass(env, kServiceTabLauncherClassPath, &g_ServiceTabLauncher_clazz)

}  // namespace

// Step 2: method stubs.

static void OnWebContentsForRequestAvailable(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jint requestId,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_ServiceTabLauncher_nativeOnWebContentsForRequestAvailable(JNIEnv*
    env, jclass jcaller,
    jint requestId,
    jobject webContents) {
  return OnWebContentsForRequestAvailable(env,
      base::android::JavaParamRef<jclass>(env, jcaller), requestId,
      base::android::JavaParamRef<jobject>(env, webContents));
}

static base::subtle::AtomicWord g_ServiceTabLauncher_launchTab = 0;
static void Java_ServiceTabLauncher_launchTab(JNIEnv* env, const
    base::android::JavaRefOrBare<jobject>& context,
    JniIntWrapper requestId,
    jboolean privateMode,
    const base::android::JavaRefOrBare<jstring>& url,
    JniIntWrapper disposition,
    const base::android::JavaRefOrBare<jstring>& referrerUrl,
    JniIntWrapper referrerPolicy,
    const base::android::JavaRefOrBare<jstring>& extraHeaders) {
  CHECK_CLAZZ(env, ServiceTabLauncher_clazz(env),
      ServiceTabLauncher_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, ServiceTabLauncher_clazz(env),
      "launchTab",

"("
"Landroid/content/Context;"
"I"
"Z"
"Ljava/lang/String;"
"I"
"Ljava/lang/String;"
"I"
"Ljava/lang/String;"
")"
"V",
      &g_ServiceTabLauncher_launchTab);

     env->CallStaticVoidMethod(ServiceTabLauncher_clazz(env),
          method_id, context.obj(), as_jint(requestId), privateMode, url.obj(),
              as_jint(disposition), referrerUrl.obj(), as_jint(referrerPolicy),
              extraHeaders.obj());
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsServiceTabLauncher[] = {
    { "nativeOnWebContentsForRequestAvailable",
"("
"I"
"Lorg/chromium/content_public/browser/WebContents;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_ServiceTabLauncher_nativeOnWebContentsForRequestAvailable)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsServiceTabLauncherSize =
      arraysize(kMethodsServiceTabLauncher);

  if (env->RegisterNatives(ServiceTabLauncher_clazz(env),
                           kMethodsServiceTabLauncher,
                           kMethodsServiceTabLauncherSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, ServiceTabLauncher_clazz(env), __FILE__);
    return false;
  }

  return true;
}

#endif  // com_opera_android_browser_ServiceTabLauncher_JNI
