// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/browser/passwordmanager/PasswordManagerDialogRequest

#ifndef com_opera_android_browser_passwordmanager_PasswordManagerDialogRequest_JNI
#define com_opera_android_browser_passwordmanager_PasswordManagerDialogRequest_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kPasswordManagerDialogRequestClassPath[] =
    "com/opera/android/browser/passwordmanager/PasswordManagerDialogRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_PasswordManagerDialogRequest_clazz
    __attribute__((unused)) = 0;
#define PasswordManagerDialogRequest_clazz(env) base::android::LazyGetClass(env, kPasswordManagerDialogRequestClassPath, &g_PasswordManagerDialogRequest_clazz)

}  // namespace

namespace opera {

// Step 2: method stubs.
JNI_GENERATOR_EXPORT void
    Java_com_opera_android_browser_passwordmanager_PasswordManagerDialogRequest_nativeOnResult(JNIEnv*
    env, jobject jcaller,
    jlong nativePasswordManagerDialogRequest,
    jboolean accepted) {
  PasswordManagerDialogRequest* native =
      reinterpret_cast<PasswordManagerDialogRequest*>(nativePasswordManagerDialogRequest);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnResult");
  return native->OnResult(env, base::android::JavaParamRef<jobject>(env,
      jcaller), accepted);
}

static base::subtle::AtomicWord
    g_PasswordManagerDialogRequest_showRememberPasswordDialog = 0;
static void Java_PasswordManagerDialogRequest_showRememberPasswordDialog(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PasswordManagerDialogRequest_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PasswordManagerDialogRequest_clazz(env),
      "showRememberPasswordDialog",

"("
")"
"V",
      &g_PasswordManagerDialogRequest_showRememberPasswordDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_PasswordManagerDialogRequest_showReplacePasswordDialog = 0;
static void Java_PasswordManagerDialogRequest_showReplacePasswordDialog(JNIEnv*
    env, const base::android::JavaRefOrBare<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      PasswordManagerDialogRequest_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, PasswordManagerDialogRequest_clazz(env),
      "showReplacePasswordDialog",

"("
")"
"V",
      &g_PasswordManagerDialogRequest_showReplacePasswordDialog);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PasswordManagerDialogRequest_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_PasswordManagerDialogRequest_create(JNIEnv* env, jlong
    nativeDialogRequest,
    const base::android::JavaRefOrBare<jobject>& tab) {
  CHECK_CLAZZ(env, PasswordManagerDialogRequest_clazz(env),
      PasswordManagerDialogRequest_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, PasswordManagerDialogRequest_clazz(env),
      "create",

"("
"J"
"Lcom/opera/android/browser/chromium/ChromiumTab;"
")"
"Lcom/opera/android/browser/passwordmanager/PasswordManagerDialogRequest;",
      &g_PasswordManagerDialogRequest_create);

  jobject ret =
      env->CallStaticObjectMethod(PasswordManagerDialogRequest_clazz(env),
          method_id, nativeDialogRequest, tab.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsPasswordManagerDialogRequest[] = {
    { "nativeOnResult",
"("
"J"
"Z"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_browser_passwordmanager_PasswordManagerDialogRequest_nativeOnResult)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsPasswordManagerDialogRequestSize =
      arraysize(kMethodsPasswordManagerDialogRequest);

  if (env->RegisterNatives(PasswordManagerDialogRequest_clazz(env),
                           kMethodsPasswordManagerDialogRequest,
                           kMethodsPasswordManagerDialogRequestSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, PasswordManagerDialogRequest_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace opera

#endif  // com_opera_android_browser_passwordmanager_PasswordManagerDialogRequest_JNI
