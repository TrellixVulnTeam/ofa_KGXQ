// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/sync/NativeSyncManager

#ifndef com_opera_android_sync_NativeSyncManager_JNI
#define com_opera_android_sync_NativeSyncManager_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kNativeSyncManagerClassPath[] =
    "com/opera/android/sync/NativeSyncManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_NativeSyncManager_clazz __attribute__((unused)) = 0;
#define NativeSyncManager_clazz(env) base::android::LazyGetClass(env, kNativeSyncManagerClassPath, &g_NativeSyncManager_clazz)

}  // namespace

namespace mobile {
namespace android {

// Step 2: method stubs.

static void LoggedIn(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& loginName,
    const base::android::JavaParamRef<jstring>& userName,
    const base::android::JavaParamRef<jstring>& password);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeLoggedIn(JNIEnv* env,
    jclass jcaller,
    jstring loginName,
    jstring userName,
    jstring password) {
  return LoggedIn(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, loginName),
      base::android::JavaParamRef<jstring>(env, userName),
      base::android::JavaParamRef<jstring>(env, password));
}

static void GotToken(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& token,
    const base::android::JavaParamRef<jstring>& secret);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeGotToken(JNIEnv* env,
    jclass jcaller,
    jstring token,
    jstring secret) {
  return GotToken(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, token),
      base::android::JavaParamRef<jstring>(env, secret));
}

static void Login(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& token,
    const base::android::JavaParamRef<jstring>& secret,
    const base::android::JavaParamRef<jstring>& displayName);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeLogin(JNIEnv* env,
    jclass jcaller,
    jstring token,
    jstring secret,
    jstring displayName) {
  return Login(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, token),
      base::android::JavaParamRef<jstring>(env, secret),
      base::android::JavaParamRef<jstring>(env, displayName));
}

static void Error(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint id,
    jint code,
    const base::android::JavaParamRef<jstring>& message);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeError(JNIEnv* env,
    jclass jcaller,
    jint id,
    jint code,
    jstring message) {
  return Error(env, base::android::JavaParamRef<jclass>(env, jcaller), id, code,
      base::android::JavaParamRef<jstring>(env, message));
}

static void SetDeviceId(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    const base::android::JavaParamRef<jstring>& id);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeSetDeviceId(JNIEnv* env,
    jclass jcaller,
    jstring id) {
  return SetDeviceId(env, base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, id));
}

static void InvalidateAll(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeInvalidateAll(JNIEnv*
    env, jclass jcaller) {
  return InvalidateAll(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static void Invalidate(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint source,
    const base::android::JavaParamRef<jstring>& id,
    jlong version,
    const base::android::JavaParamRef<jstring>& payload);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeInvalidate(JNIEnv* env,
    jclass jcaller,
    jint source,
    jstring id,
    jlong version,
    jstring payload) {
  return Invalidate(env, base::android::JavaParamRef<jclass>(env, jcaller),
      source, base::android::JavaParamRef<jstring>(env, id), version,
      base::android::JavaParamRef<jstring>(env, payload));
}

static jint GetStatus(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

JNI_GENERATOR_EXPORT jint
    Java_com_opera_android_sync_NativeSyncManager_nativeGetStatus(JNIEnv* env,
    jclass jcaller) {
  return GetStatus(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jstring> GetDisplayName(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jstring
    Java_com_opera_android_sync_NativeSyncManager_nativeGetDisplayName(JNIEnv*
    env, jclass jcaller) {
  return GetDisplayName(env, base::android::JavaParamRef<jclass>(env,
      jcaller)).Release();
}

static void Logout(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeLogout(JNIEnv* env,
    jclass jcaller) {
  return Logout(env, base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jobjectArray> GetSyncedSessions(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jobjectArray
    Java_com_opera_android_sync_NativeSyncManager_nativeGetSyncedSessions(JNIEnv*
    env, jclass jcaller) {
  return GetSyncedSessions(env, base::android::JavaParamRef<jclass>(env,
      jcaller)).Release();
}

static void StartSessionRestore(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeStartSessionRestore(JNIEnv*
    env, jclass jcaller) {
  return StartSessionRestore(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static void FinishSessionRestore(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeFinishSessionRestore(JNIEnv*
    env, jclass jcaller) {
  return FinishSessionRestore(env, base::android::JavaParamRef<jclass>(env,
      jcaller));
}

static void InsertTab(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint index,
    const base::android::JavaParamRef<jobject>& data);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeInsertTab(JNIEnv* env,
    jclass jcaller,
    jint index,
    jobject data) {
  return InsertTab(env, base::android::JavaParamRef<jclass>(env, jcaller),
      index, base::android::JavaParamRef<jobject>(env, data));
}

static void RemoveTab(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint index);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeRemoveTab(JNIEnv* env,
    jclass jcaller,
    jint index) {
  return RemoveTab(env, base::android::JavaParamRef<jclass>(env, jcaller),
      index);
}

static void UpdateTab(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint index,
    const base::android::JavaParamRef<jobject>& data);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeUpdateTab(JNIEnv* env,
    jclass jcaller,
    jint index,
    jobject data) {
  return UpdateTab(env, base::android::JavaParamRef<jclass>(env, jcaller),
      index, base::android::JavaParamRef<jobject>(env, data));
}

static void SetActiveTab(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jint index);

JNI_GENERATOR_EXPORT void
    Java_com_opera_android_sync_NativeSyncManager_nativeSetActiveTab(JNIEnv*
    env, jclass jcaller,
    jint index) {
  return SetActiveTab(env, base::android::JavaParamRef<jclass>(env, jcaller),
      index);
}

static base::subtle::AtomicWord g_NativeSyncManager_setupOAuth = 0;
static void Java_NativeSyncManager_setupOAuth(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& application,
    const base::android::JavaRefOrBare<jstring>& applicationKey,
    const base::android::JavaRefOrBare<jstring>& clientKey,
    const base::android::JavaRefOrBare<jstring>& clientSecret) {
  CHECK_CLAZZ(env, NativeSyncManager_clazz(env),
      NativeSyncManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, NativeSyncManager_clazz(env),
      "setupOAuth",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_NativeSyncManager_setupOAuth);

     env->CallStaticVoidMethod(NativeSyncManager_clazz(env),
          method_id, application.obj(), applicationKey.obj(), clientKey.obj(),
              clientSecret.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_NativeSyncManager_requestLogin = 0;
static void Java_NativeSyncManager_requestLogin(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& loginName) {
  CHECK_CLAZZ(env, NativeSyncManager_clazz(env),
      NativeSyncManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, NativeSyncManager_clazz(env),
      "requestLogin",

"("
"Ljava/lang/String;"
")"
"V",
      &g_NativeSyncManager_requestLogin);

     env->CallStaticVoidMethod(NativeSyncManager_clazz(env),
          method_id, loginName.obj());
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_NativeSyncManager_requestToken = 0;
static jint Java_NativeSyncManager_requestToken(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& loginName,
    const base::android::JavaRefOrBare<jstring>& password) {
  CHECK_CLAZZ(env, NativeSyncManager_clazz(env),
      NativeSyncManager_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, NativeSyncManager_clazz(env),
      "requestToken",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"I",
      &g_NativeSyncManager_requestToken);

  jint ret =
      env->CallStaticIntMethod(NativeSyncManager_clazz(env),
          method_id, loginName.obj(), password.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_NativeSyncManager_cancelRequest = 0;
static void Java_NativeSyncManager_cancelRequest(JNIEnv* env, JniIntWrapper id)
    {
  CHECK_CLAZZ(env, NativeSyncManager_clazz(env),
      NativeSyncManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, NativeSyncManager_clazz(env),
      "cancelRequest",

"("
"I"
")"
"V",
      &g_NativeSyncManager_cancelRequest);

     env->CallStaticVoidMethod(NativeSyncManager_clazz(env),
          method_id, as_jint(id));
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_NativeSyncManager_statusChanged = 0;
static void Java_NativeSyncManager_statusChanged(JNIEnv* env, JniIntWrapper
    status) {
  CHECK_CLAZZ(env, NativeSyncManager_clazz(env),
      NativeSyncManager_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, NativeSyncManager_clazz(env),
      "statusChanged",

"("
"I"
")"
"V",
      &g_NativeSyncManager_statusChanged);

     env->CallStaticVoidMethod(NativeSyncManager_clazz(env),
          method_id, as_jint(status));
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsNativeSyncManager[] = {
    { "nativeLoggedIn",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeLoggedIn)
    },
    { "nativeGotToken",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeGotToken)
    },
    { "nativeLogin",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeLogin)
    },
    { "nativeError",
"("
"I"
"I"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeError)
    },
    { "nativeSetDeviceId",
"("
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeSetDeviceId)
    },
    { "nativeInvalidateAll",
"("
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeInvalidateAll)
    },
    { "nativeInvalidate",
"("
"I"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeInvalidate)
    },
    { "nativeGetStatus",
"("
")"
"I",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeGetStatus)
    },
    { "nativeGetDisplayName",
"("
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeGetDisplayName)
    },
    { "nativeLogout",
"("
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeLogout)
    },
    { "nativeGetSyncedSessions",
"("
")"
"[Lcom/opera/android/sync/SyncedSession;",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeGetSyncedSessions)
    },
    { "nativeStartSessionRestore",
"("
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeStartSessionRestore)
    },
    { "nativeFinishSessionRestore",
"("
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeFinishSessionRestore)
    },
    { "nativeInsertTab",
"("
"I"
"Lcom/opera/android/op/SyncedTabData;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeInsertTab)
    },
    { "nativeRemoveTab",
"("
"I"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeRemoveTab)
    },
    { "nativeUpdateTab",
"("
"I"
"Lcom/opera/android/op/SyncedTabData;"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeUpdateTab)
    },
    { "nativeSetActiveTab",
"("
"I"
")"
"V",
    reinterpret_cast<void*>(Java_com_opera_android_sync_NativeSyncManager_nativeSetActiveTab)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsNativeSyncManagerSize =
      arraysize(kMethodsNativeSyncManager);

  if (env->RegisterNatives(NativeSyncManager_clazz(env),
                           kMethodsNativeSyncManager,
                           kMethodsNativeSyncManagerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, NativeSyncManager_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace mobile

#endif  // com_opera_android_sync_NativeSyncManager_JNI
