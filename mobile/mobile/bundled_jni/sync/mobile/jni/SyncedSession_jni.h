// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/sync/SyncedSession

#ifndef com_opera_android_sync_SyncedSession_JNI
#define com_opera_android_sync_SyncedSession_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSyncedSessionClassPath[] = "com/opera/android/sync/SyncedSession";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SyncedSession_clazz __attribute__((unused)) = 0;
#define SyncedSession_clazz(env) base::android::LazyGetClass(env, kSyncedSessionClassPath, &g_SyncedSession_clazz)

}  // namespace

namespace mobile {
namespace android {

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jobjectArray> GetSessionWindows(JNIEnv*
    env, const base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& tag);

JNI_GENERATOR_EXPORT jobjectArray
    Java_com_opera_android_sync_SyncedSession_nativeGetSessionWindows(JNIEnv*
    env, jclass jcaller,
    jstring tag) {
  return GetSessionWindows(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, tag)).Release();
}

static base::subtle::AtomicWord g_SyncedSession_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SyncedSession_create(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& tag,
    const base::android::JavaRefOrBare<jstring>& name,
    JniIntWrapper deviceType,
    jlong modifiedTime) {
  CHECK_CLAZZ(env, SyncedSession_clazz(env),
      SyncedSession_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, SyncedSession_clazz(env),
      "create",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
"J"
")"
"Lcom/opera/android/sync/SyncedSession;",
      &g_SyncedSession_create);

  jobject ret =
      env->CallStaticObjectMethod(SyncedSession_clazz(env),
          method_id, tag.obj(), name.obj(), as_jint(deviceType), modifiedTime);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSyncedSession[] = {
    { "nativeGetSessionWindows",
"("
"Ljava/lang/String;"
")"
"[Lcom/opera/android/sync/SyncedSessionWindow;",
    reinterpret_cast<void*>(Java_com_opera_android_sync_SyncedSession_nativeGetSessionWindows)
    },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  if (base::android::IsManualJniRegistrationDisabled()) return true;

  const int kMethodsSyncedSessionSize = arraysize(kMethodsSyncedSession);

  if (env->RegisterNatives(SyncedSession_clazz(env),
                           kMethodsSyncedSession,
                           kMethodsSyncedSessionSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, SyncedSession_clazz(env), __FILE__);
    return false;
  }

  return true;
}

}  // namespace android
}  // namespace mobile

#endif  // com_opera_android_sync_SyncedSession_JNI
