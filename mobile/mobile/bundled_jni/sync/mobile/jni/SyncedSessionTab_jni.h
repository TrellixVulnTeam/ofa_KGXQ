// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/opera/android/sync/SyncedSessionTab

#ifndef com_opera_android_sync_SyncedSessionTab_JNI
#define com_opera_android_sync_SyncedSessionTab_JNI

#include <jni.h>

#include "../../../../../../../../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSyncedSessionTabClassPath[] =
    "com/opera/android/sync/SyncedSessionTab";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_SyncedSessionTab_clazz __attribute__((unused)) = 0;
#define SyncedSessionTab_clazz(env) base::android::LazyGetClass(env, kSyncedSessionTabClassPath, &g_SyncedSessionTab_clazz)

}  // namespace

namespace mobile {
namespace android {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SyncedSessionTab_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SyncedSessionTab_create(JNIEnv* env, jlong windowId,
    jlong id,
    const base::android::JavaRefOrBare<jstring>& extensionAppId,
    jlong modifiedTime,
    const base::android::JavaRefOrBare<jstring>& virtualURL,
    const base::android::JavaRefOrBare<jstring>& originalURL,
    const base::android::JavaRefOrBare<jstring>& title) {
  CHECK_CLAZZ(env, SyncedSessionTab_clazz(env),
      SyncedSessionTab_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, SyncedSessionTab_clazz(env),
      "create",

"("
"J"
"J"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lcom/opera/android/sync/SyncedSessionTab;",
      &g_SyncedSessionTab_create);

  jobject ret =
      env->CallStaticObjectMethod(SyncedSessionTab_clazz(env),
          method_id, windowId, id, extensionAppId.obj(), modifiedTime,
              virtualURL.obj(), originalURL.obj(), title.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

}  // namespace android
}  // namespace mobile

#endif  // com_opera_android_sync_SyncedSessionTab_JNI
