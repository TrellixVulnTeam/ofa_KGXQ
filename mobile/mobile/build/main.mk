
halp: help

help:
	@echo Available targets:
	@echo -e \\tall\\t\\tbuild everything except chromium_tests
	@echo -e \\tswig\\t\\tbuild Java glue
	@echo -e \\tgn\\t\\tbuild chromium project files
	@echo -e \\tchromium\\tbuild chromium
	@echo -e \\tandroid\\t\\tbuild ui\\n
	@echo -e \\tchromium_tests
	@echo -e \\t\\tBuild chromium unit tests. Set CHROMIUM_UNITTESTS to build only
	@echo -e \\t\\tselected unittests. Use chromium/src/build/android/run_tests.py
	@echo -e \\t\\tto run tests \(use --test_arguments=\"--gtest_output=xml:path\"
	@echo -e \\t\\tto save results in xml on device\).
	@echo
	@echo "It'll build everything in debug mode by default."
	@echo "Use DEBUG=NO to build everything in release mode."
	@echo "Use UI_DEBUG=YES to build the UI in debug mode and the rest in release."
	@echo "Use FAST_DEBUG=YES to build with optimizations enabled."
	@echo "Use ICECC=YES to build with icecc."
	@echo "Use PROGUARD=NO to disable ProGuard in release mode."
	@echo "Use OBFUSCATE=NO to disable ProGuard obfuscation. (ProGuard must be on)."

WAM_ROOT := $(SOURCE_ROOT)/mobile/mobile

CHROMIUM_ROOT := $(SOURCE_ROOT)/chromium/src
BRANDING_ROOT := $(WAM_ROOT)/branding

# UI_DEBUG: Build UI code in debug mode
# CR_DEBUG: Build Chromium code in debug mode
# DEBUG: Controls default values for UI/CR_DEBUG (default: DEBUG=YES)
#
# Don't use plain DEBUG in other makefile fragments, use the specific one of
# UI_DEBUG or CR_DEBUG depending on what bit of code is being built.
#
# UI_DEBUG=YES with no other debug variables set forces CR_DEBUG to NO.
# This is a bit backwards, since UI_DEBUG defaults to YES already... So this
# only applies if UI_DEBUG gets its value from outside the makefile.

DEBUG ?= YES
# Check *before* UI_DEBUG gets its default value. If UI_DEBUG is not given,
# CR_DEBUG should follow DEBUG.
ifeq ($(UI_DEBUG), YES)
CR_DEBUG ?= NO
else
CR_DEBUG ?= $(DEBUG)
endif
UI_DEBUG ?= $(DEBUG)
FAST_DEBUG ?= NO
USE_SUMO ?= $(shell command -v sumo > /dev/null && echo YES)
VERBOSE ?= NO
CHATTY ?= NO
UNITTEST ?= NO
PUBLIC_BUILD ?= NO
BETA ?= YES
ICECC ?= NO
ICECC_JOBS ?= 50
ENABLE_SITEPATCHER_TEST ?= NO

# WAM-9164: Only disable if you know it's cool.
WAIT_FOR_EULA_APPROVAL ?= YES

# Official builds supresses DCHECKs and TRACE_EVENTs.
# Disable them in release by default.
# This needs to be disabled when using the tracing.
# See: http://www.chromium.org/developers/how-tos/trace-event-profiling-tool
ifeq ($(CR_DEBUG), YES)
OFFICIAL = NO
else
OFFICIAL = YES
endif

ifeq ($(UI_DEBUG), YES)
AntTarget := debug
else
AntTarget := release
endif

PRODUCT_ROOT = $(WAM_ROOT)/projects/generic

BRAND ?= opera
include branding/$(BRAND)/branding.mk

# Check that required branding variables are set
RequiredBrandVariables = \
  BASE_PACKAGE_NAME \
  DEFAULT_BRANDING \
  DISTRIBUTION \
  LIB_STORAGE \
  PRODUCT_NAME
MissingBrandVariables = $(strip \
  $(foreach var, \
    ${RequiredBrandVariables}, \
    $(if $(findstring undefined, $(origin ${var})), ${var}) \
  ) \
)

ifneq ($(MissingBrandVariables),)
$(error $(MissingBrandVariables) not set for the "$(BRAND)" brand)
endif

TURBO_BRANDING ?= $(DEFAULT_BRANDING)
BRAND_RES_DIR ?= $(BRANDING_ROOT)/$(BRAND)
BRAND_STR_DIR ?= $(BRAND_RES_DIR)

SHOW_POWERED_BY ?= $(if $(filter opera,$(BRAND)),NO,YES)
SHOW_POWERED_BY_SPLASH ?= $(SHOW_POWERED_BY)
SHOW_POWERED_BY_GUIDE ?= $(SHOW_POWERED_BY)
SHOW_POWERED_BY_MENU ?= $(SHOW_POWERED_BY)

include build/arch.mk

WAM_OUT := bin/$(AntTarget)-wam-$(TARGET_ARCH)
WAM_OUT_ABS := $(abspath $(WAM_OUT))
APP_OUT := $(WAM_OUT)/app
# this path contains all Java classes generated by us or by Chromium excluding R.java and
# Manifest.java
APP_GEN_SRC := $(APP_OUT)/gen/src
# folder for generated R.java and Manifest.java
APP_GEN_R := $(APP_OUT)/gen/r

# The double subfolders are because everything in assets-root will be added to
# the apk with the same directory structure rather than including it as
# 'assets' the way that the normal assets directory is handled.
WAM_ASSETS := $(WAM_OUT)/assets-root/assets

CODE_PACKAGE := com.opera.android
CODE_PACKAGE_PATH = $(subst .,/,$(CODE_PACKAGE))

ENABLE_APPBOY ?= YES

ENABLE_OSP_STATS ?= YES

ENABLE_APPSFLYER ?= NO
ENABLE_APPSFLYER_LAUNCH_LIMIT ?= YES

ENABLE_GOOGLE_ANALYTICS ?= YES

APPBOY_SDK_PATH = $(WAM_ROOT)/projects/third_party/appboy
APPBOY_CODE_PATH = $(APPBOY_SDK_PATH)/src
APPBOY_GEN = $(APPBOY_SDK_PATH)/gen
APPBOY_CODE_PACKAGE = com.appboy.ui
APPBOY_CODE_PACKAGE_PATH = $(subst .,/,$(APPBOY_CODE_PACKAGE))

FACEBOOK_SDK_PATH = $(WAM_ROOT)/projects/third_party/facebook
FACEBOOK_PACKAGE = com.facebook
FACEBOOK_PACKAGE_PATH = $(subst .,/,$(FACEBOOK_PACKAGE))
FACEBOOK_GEN = $(FACEBOOK_SDK_PATH)/gen
FACEBOOK_RES_PATH = $(FACEBOOK_SDK_PATH)/res

# Twitter SDK integration
TWITTER_SDK_PATH = $(WAM_ROOT)/projects/third_party/twitter
TWITTER_GEN = $(TWITTER_SDK_PATH)/gen
TWITTER_CORE_PACKAGE = com.twitter.sdk.android.core
TWITTER_CORE_PACKAGE_PATH = $(subst .,/,$(TWITTER_CORE_PACKAGE))
TWITTER_CORE_PATH = $(TWITTER_SDK_PATH)/kit/twitter-core
TWITTER_CORE_CODE_PATH = $(TWITTER_CORE_PATH)/src/main/java
TWITTER_CORE_RES_PATH = $(TWITTER_CORE_PATH)/src/main/res
FABRIC_SDK_PATH = $(TWITTER_SDK_PATH)/fabric

# Zendesk SDK integration
ZENDESK_PATH = $(WAM_ROOT)/projects/third_party/zendesk
ZENDESK_BELVEDERE_PATH = $(ZENDESK_PATH)/belvedere/1.0.2.1
ZENDESK_SDK_PATH = $(ZENDESK_PATH)/sdk/1.7.2.1
ZENDESK_SDK_PROVIDERS_PATH = $(ZENDESK_PATH)/sdk-providers/1.7.2.1
ZENDESK_BELVEDERE_GEN = $(ZENDESK_BELVEDERE_PATH)/gen
ZENDESK_SDK_GEN = $(ZENDESK_SDK_PATH)/gen
ZENDESK_BELVEDERE_PACKAGE = com.zendesk.belvedere
ZENDESK_BELVEDERE_PACKAGE_PATH = $(subst .,/,$(ZENDESK_BELVEDERE_PACKAGE))
ZENDESK_BELVEDERE_RES_PATH = $(ZENDESK_BELVEDERE_PATH)/res
ZENDESK_SDK_PACKAGE = com.zendesk.sdk
ZENDESK_SDK_PACKAGE_PATH = $(subst .,/,$(ZENDESK_SDK_PACKAGE))
ZENDESK_SDK_RES_PATH = $(ZENDESK_SDK_PATH)/res

# Opera Sync buttons in the UI.
ENABLE_SYNC ?= YES

# Help section in settings
ENABLE_HELP ?= YES

# Use custom Burmese translations for the Zawgyi font.
ENABLE_ZAWGYI_ENCODING ?= NO

# Implements the Lollipop android.provider.Browser API
ENABLE_BOOKMARK_PROVIDER ?= NO

BOOKMARK_PROVIDER_PATH = $(WAM_ROOT)/projects/third_party/BookmarkProvider
BOOKMARK_PROVIDER_GEN := $(WAM_OUT)/BookmarkProvider/gen

ENABLE_WEB_BLUETOOTH ?= $(BETA)

# Bookmark and History provider
ENABLE_BROWSER_PROVIDER ?= NO
BROWSER_PROVIDER_PATH = $(WAM_ROOT)/projects/BrowserProvider
BROWSER_PROVIDER_GEN = $(WAM_OUT)/BrowserProvider/gen

SWIG_PACKAGES := opera/op

# see features.h for available clusters
MINI_CLUSTER ?= GLOBAL_CLUSTER

# The nightly number part of the version number
NIGHTLY := $(shell python -c "import json; print json.load(open(\"$(SOURCE_ROOT)/common/VERSION\"))['nightly']")

# Slow build steps are off by default in developer builds
ifeq ($(UI_DEBUG), YES)
MAP_TARBALL ?= NO
RUN_LINT ?= NO
FAST_PACK ?= YES
REPACKAGE_APK ?= NO
else
MAP_TARBALL ?= YES
RUN_LINT ?= YES
FAST_PACK ?= NO
REPACKAGE_APK ?= YES
endif

ifeq ($(REPACKAGE_APK), NO)
DISTRIBUTION := $(firstword $(DISTRIBUTION))
LIB_STORAGE := $(firstword $(LIB_STORAGE))
endif

# Chromium-debug builds are component builds by default.
# Note! Component builds only work on devices running Android 4.3 and up.
COMPONENT_BUILD ?= $(CR_DEBUG)

# Build feature defaults
ENABLE_ASSIST_INTENT ?= YES

# The product name to report to Socorro.
SOCORRO_PRODUCT_NAME ?= OperaMobile

# The product name to report to Socorro.
SOCORRO_PRODUCT_NAME ?= generic

# Socorro buildid. This id is needed when adding product versions
# to Socorro and when reporting crashes.
SOCORRO_BUILDID ?= $(shell python $(WAM_ROOT)/build/socorro-buildid.py generic $(BETA) $(BUILDNUMBER))

# The debug library archive is used to be able to load crash dumps
# in gdb. This archive can be huge so it should only be generated
# by default for a select few builds such as public builds.
#
# APPBOY_INTERNAL_PUSH_BUILD flag is used to
# Create a build against our internal test project for Appboy. A separate
# Appboy ID and Google API project will be used if this is set to YES.
#
# Backup and Restore mechanism is enabled in internal builds
# for testing as requested by QA.
ifeq ($(PUBLIC_BUILD), YES)
DEBUG_LIBRARIES_TARBALL ?= YES
APPBOY_INTERNAL_PUSH_BUILD ?= NO
ALLOW_BACKUP ?= NO
else
DEBUG_LIBRARIES_TARBALL ?= NO
APPBOY_INTERNAL_PUSH_BUILD ?= YES
ALLOW_BACKUP ?= YES
endif

# Allow overriding network information, only for internal builds.
ENABLE_NETWORK_OVERRIDE ?= NO

LONGEST_STRINGS ?= NO

ifdef BUILDNUMBER
DEVELOPER_BUILD ?= NO
else
DEVELOPER_BUILD ?= YES
BUILDNUMBER := 10
endif

# See src/com/opera/android/crashhandler/Mode.java
# for allowable CRASH_HANDLER_MODE values.
ifeq ($(CR_DEBUG), YES)
CRASH_HANDLER_MODE ?= OFF
else
ifeq ($(DEVELOPER_BUILD), YES)
CRASH_HANDLER_MODE ?= LOCAL
else
CRASH_HANDLER_MODE ?= REMOTE
endif
endif

# Set VERSION_NUMBER according to BUILDBOT-25
VERSION_NUMBER ?= $(shell $(WAM_ROOT)/build/version.py $(SOURCE_ROOT) $(BUILDNUMBER))

# Set CHROMIUM_VERSION according to $(CHROMIUM_ROOT)/chrome/VERSION
CHROMIUM_VERSION ?= $(shell python $(CHROMIUM_ROOT)/build/util/version.py -f $(CHROMIUM_ROOT)/chrome/VERSION -t "@MAJOR@.@MINOR@.@BUILD@.@PATCH@")
LASTCHANGE ?= $(shell python $(CHROMIUM_ROOT)/build/util/version.py -f $(CHROMIUM_ROOT)/build/util/LASTCHANGE -t "@LASTCHANGE@")

# Specify the languages we are supporting
# Keep in sync with 'locales' in src/chill/BUILD.gn
OPERA_LOCALES := ar be bg bn ca cs da de el en-GB en-US es es-419 fa fi fil fr fr-CA he hi hr hu id \
    it ja ko ms my nb nl pl pt-BR pt-PT ro ru si sk sl sr sv sw ta th tr uk ur vi zh-CN zh-TW

ifeq ($(ENABLE_ZAWGYI_ENCODING), NO)
OPERA_LOCALES += my-ZG
endif


ifeq ($(ENABLE_ZAWGYI_ENCODING), NO)
# Disable this for now, re-add when we bring back translations
# OPERA_LOCALES += my-ZG
endif

BETA_PACKAGE_SUFFIX ?= beta

# Package name to put in Android manifest.
PACKAGE_NAME ?= $(BASE_PACKAGE_NAME)$(if $(filter YES,$(BETA)),.$(BETA_PACKAGE_SUFFIX))$(if $(PACKAGE_SUFFIX),.$(PACKAGE_SUFFIX))

# Abstract socket name used for devtools. Used to debug remotely in Desktop
# Chrome^WOpera by forwarding the Unix socket to a remote host. E.g. "adb
# forward tcp:9222 localabstract:<package>.devtools" will let the user open
# http://localhost:9222 in their Desktop browser.
OPERA_DEVTOOLS_SOCKET_NAME ?= $(PACKAGE_NAME).devtools

ifeq ($(CR_DEBUG), YES)
BUILDTYPE = Debug
else
BUILDTYPE = Release
endif

ifeq ($(PUBLIC_BUILD), YES)
ifeq ($(LONGEST_STRINGS), YES)
$(error PUBLIC_BUILD can not be used with LONGEST_STRINGS=YES))
endif
ifeq ($(DEBUG), YES)
$(error PUBLIC_BUILD can not be used with DEBUG=YES))
endif
ifeq ($(CR_DEBUG), YES)
$(error PUBLIC_BUILD can not be used with CR_DEBUG=YES))
endif
ifeq ($(UI_DEBUG), YES)
$(error PUBLIC_BUILD can not be used with UI_DEBUG=YES))
endif
ifeq ($(FAST_DEBUG), YES)
$(error PUBLIC_BUILD can not be used with FAST_DEBUG=YES))
endif
ifeq ($(ENABLE_SITEPATCHER_TEST), YES)
$(error PUBLIC_BUILD can not be used with ENABLE_SITEPATCHER_TEST=YES))
endif
endif

ifeq ($(COMPONENT_BUILD), YES)
ifeq ($(MAP_TARBALL), YES)
$(error COMPONENT_BUILD is not compatible with MAP_TARBALL)
endif
CR_LIB_EXT := .cr.so
else
CR_LIB_EXT := .so
endif

ifeq ($(VERBOSE)-$(CHATTY), NO-NO)
H := @
else
H :=
endif

# Append directories that must be created to CREATE_DIRS.
CREATE_DIRS :=

fnLink = @echo Copying '$1' to '$2' ; rm -f '$2' ; ln '$1' '$2' || cp '$1' '$2'
fnSymLink = rm -f '$2' ; mkdir --parents $2 ; rm -r $2 ; ln -s -f '$1' '$2' ;
# whitespace-separated list of jar files -> colon-separated classpath list
empty :=
space := $(empty) $(empty)
comma := ,
fnMkClasspath = $(subst $(space),:,$1)
fnMkCommaList = $(subst $(space),$(comma),$1)

CHROMIUM_OUT = out_wam_$(TARGET_ARCH)/$(BUILDTYPE)
CHROMIUM_OUT_FULL = $(CHROMIUM_ROOT)/$(CHROMIUM_OUT)

fnToInt = $(if $(filter YES,$1),1,0)
fnToBool = $(if $(filter YES,$1),true,false)
fnToFlag = $(if $(filter YES,$1),$2,)

# Generate the optimal make workaround for a multiple output rule.
#
# Instead of writing a rule like "out.a out.b out.c: input" (which doesn't do
# what you expect), introduce a timestamp file and write the rule like
# "out.stamp: input", then use this macro to wrap things up.
#
# This will add the dependencies and rules to make sure that anything
# depending on an output file waits for the single command to finish, and make
# sure that if one of the output files are lost the command gets rerun (but
# only once!).
#
# The obvious method for a multi-output rule may cause the command to run once
# for each output file: "a b: c" is equivalent to making two rules "a: c" and
# "b: c" with the same commands.
#
# Generated dependency files should be passed as a separate parameter to this
# macro - these files don't get a dependency on the stamp file, but will cause
# the stamp file to be removed when missing.
# The reason for doing this is that if an included makefile has rules to update
# it and dependencies on other targets, those targets will be updated by Make
# automatically as a dependency for Makefile, which we usually don't want.
#
# For example swig generates a .d file, but if we're not building a target that
# depends on swig outputs (like in `make clean`), we don't want to run swig.
#
# $1: stamp file
# $2: real output files
# $3: optional, list of generated dependency files.
define MULTI_OUTPUT_RULE
$2: $1
	@
$(foreach o,$2 $3,$(if $(wildcard $o),,$(shell test -f $1 && echo $o missing, removing $1 >&2; rm -f $1)))
endef


include build/sdk.mk
include build/swig.mk
-include build/serverconf.mk
include build/google-play-services.mk
include build/gn.mk
include build/chromium.mk
-include build/android.mk
-include build/wam-gdb.mk


.PHONY: halp all pak_list

all: android

pak_list: $(CHROMIUM_OUT_FULL)/opera.pak
	$H cd $(WAM_ROOT) && python build/list_pak.py $(CHROMIUM_OUT_FULL) $(CHROMIUM_OUT_FULL)/opera.pak | sort -rnk2 >$(WAM_ROOT)/bin/opera.list 2>&1
	@[ -f $(WAM_ROOT)/bin/opera.list ] && echo "Biggest opera.pak resources:" && head -5 $(WAM_ROOT)/bin/opera.list

# Create output directories on demand.
$(sort $(CREATE_DIRS)):
	$H mkdir -p $@
