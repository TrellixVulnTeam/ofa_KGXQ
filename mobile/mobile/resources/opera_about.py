#!/usr/bin/env python

"""Utility for outputting third party licensing information, normally
executed from the build system. It reuses existing infrastructure for
generating chromium licensing info, in addition to the opera specific
third party license information. Note: there is currently no
duplication detection between chromium and opera.
"""

import argparse
import cgi
import sys
import os

from subprocess import check_call

# Paths known to be not included in our product. Putting a path here
# excludes it regardless of what is said in the third party directory.
EXCLUDED_PATHS = (
    'third_party/swiftshader'
)

parser = argparse.ArgumentParser(
    description=__doc__,formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("-v", "--verbose",
                    help="output licensing warnings to stderr",
                    action="store_true")
parser.add_argument("--chromium", required = True,
                    help = "Chromium source path")
parser.add_argument("--input", required = True,
                    help = "Read input files from path")
parser.add_argument("--output", required = True,
                    help = "Place the output into file")
parser.add_argument("--lzma", required = True,
                    help = "Path to LzmaUtil")
args = parser.parse_args()

entry_template = open(os.path.join(args.input,
                                   'opera_about_entry.tmpl')).read()

sys.path.append(os.path.join(args.chromium, "tools"))

import licenses

def EvaluateTemplate(template, env, escape=True):
    """Expand a template with variables like {{foo}} using a
    dictionary of expansions."""
    for key, val in env.items():
        if escape and not key.endswith("_unescaped"):
            val = cgi.escape(val)
        template = template.replace('{{%s}}' % key, val)
    return template

def GenerateChromiumCredits():
    """Generate credits for chromium, dumping the result to stdout."""

    # FindThirdPartyDirs croaks on paths with trailing slash.
    chromium_dir = args.chromium.rstrip('/')

    third_party_dirs = \
        licenses.FindThirdPartyDirs(licenses.PRUNE_PATHS, chromium_dir)

    entries = []
    for path in sorted(third_party_dirs):

        if (path in EXCLUDED_PATHS):
            if (args.verbose):
                sys.stderr.write("NOTE: licensing info for " + path +
                                 " is marked as excluded, skipping.\n")
            continue

        try:
            metadata = licenses.ParseDir(path, args.chromium)
        except licenses.LicenseError:
            if (args.verbose):
                sys.stderr.write("WARNING: licensing info for " + path +
                                 " is incomplete, skipping.\n")
            continue
        if metadata['License File'] == licenses.NOT_SHIPPED:
            if (args.verbose):
                sys.stderr.write("Path " + path + " marked as " +
                                 licenses.NOT_SHIPPED +
                                 ", skipping.\n")
            continue
        env = {
            'name': metadata['Name'],
            'url': metadata['URL'],
            'license': open(metadata['License File'], 'rb').read(),
            'license_unescaped': '',
        }
        if 'Required Text' in metadata:
            required_text = open(metadata['Required Text'], 'rb').read()
            env["license_unescaped"] = required_text
        entries.append(EvaluateTemplate(entry_template, env))
    return entries

def GenerateThirdPartyCredits():
    entries = []
    for env in eval(open(os.path.join(args.input, 'third_party.py')).read()):
        if ("name" not in env):
            raise Exception("Entry lacking name!")
        if ("license" not in env):
            raise Exception("%s lacks license information!" %
                            env["name"])
        if ("license_unescaped" not in env):
            env['license_unescaped'] = ''
        entries.append(EvaluateTemplate(entry_template, env))
    entries.extend(GenerateChromiumCredits())
    return entries

def main():
    entries = GenerateThirdPartyCredits()

    file_template = open(os.path.join(args.input, 'opera_about.tmpl'),
                         'rb').read()

    out = open(args.output + '.tmp', 'w')
    out.write(
        "<!-- Generated by opera_about.py; do not edit. -->\n")
    out.write(EvaluateTemplate(file_template,
                                {'entries': '\n'.join(entries)},
                                escape=False))
    out.close()

    check_call("{0} '{1}' '{2}'".format(args.lzma, args.output + '.tmp', args.output), shell = True)

if __name__ == '__main__':
    main()
