// -*- Mode: c++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
//
// Copyright (C) 2015 Opera Software ASA.  All rights reserved.
//
// This file is an original work developed by Opera Software ASA

#ifndef CHILL_BROWSER_MIGRATION_OBML_CONVERTER_WEB_UI_CONTROLLER_H_
#define CHILL_BROWSER_MIGRATION_OBML_CONVERTER_WEB_UI_CONTROLLER_H_

#include <queue>
#include <string>
#include <utility>
#include <vector>

#include "base/process/kill.h"
#include "base/files/file_path.h"
#include "content/public/browser/web_contents_observer.h"
#include "content/public/browser/web_ui_controller.h"
#include "content/public/browser/web_ui_data_source.h"

#include "chill/browser/migration/obml_font_info.h"

namespace base {
class RefCountedMemory;
}  // namespace base

namespace content {
class WebUI;
}  // namespace content

namespace opera {

class OBMLConverterWebUIController : public content::WebUIController,
                                     public content::WebContentsObserver {
 public:
  static OBMLConverterWebUIController* FromWebUIController(
      content::WebUIController*);

  OBMLConverterWebUIController(content::WebUI* web_ui,
                               std::string source_name,
                               const std::vector<OBMLFontInfo>* font_info,
                               base::FilePath conversion_target_directory);

  // content::WebContentsObserver override
  void RenderProcessGone(base::TerminationStatus status) override;

  bool IsRunning() const;

  // Used as a parameter to ConvertSavedPage. Called when conversion of a saved
  // page has been completed whith whether the conversion was successful and the
  // path to the newly generated file.
  typedef base::Callback<void(bool, const base::FilePath&)> ConversionCallback;

  // Converts a page saved in OBML format
  void ConvertSavedPage(const base::FilePath& saved_page_path,
                        const ConversionCallback&);

 private:
  class MessageHandler;

  // Called as response to messages received from the WebUI
  void SetContentLoaded();
  void GenerateMHTML(const std::string& path);

  void StartNextConversion();

  void StartConversion(const base::FilePath& saved_page_path,
                       const ConversionCallback&);

  // Called when the MHTML file has been generated by the WebContents
  void FinalizeConversion(const base::FilePath& mhtml_file, int64_t file_size);

  void ReloadWebContents();

  bool HandleWebUIRequest(
      const std::string& path,
      const content::WebUIDataSource::GotDataCallback& callback);

  void RespondWithSavedFile(
      const base::FilePath& saved_page_path,
      const content::WebUIDataSource::GotDataCallback& callback);

  scoped_refptr<base::RefCountedString> CreateFontRuleStylesheet() const;

  content::WebUIDataSource* CreateDataSource(const std::string& source_name);

  const std::vector<OBMLFontInfo>* font_info_;

  // Marks that the WebUI has loaded and is ready to start conversion
  bool content_loaded_;

  // Prevent indefinite restarts on render crashes by tracking added conversions
  int allowed_restarts_;

  typedef std::pair<base::FilePath, const ConversionCallback> ConversionRequest;

  base::FilePath conversion_target_directory_;

  std::unique_ptr<ConversionRequest> active_conversion_;
  std::queue<ConversionRequest> pending_conversions_;

  DISALLOW_COPY_AND_ASSIGN(OBMLConverterWebUIController);
};

}  // namespace opera

#endif  // CHILL_BROWSER_MIGRATION_OBML_CONVERTER_WEB_UI_CONTROLLER_H_
